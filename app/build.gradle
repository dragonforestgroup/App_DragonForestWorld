apply plugin: 'com.android.application'

android {
    // 签名配置
    signingConfigs {
        config {
            keyAlias rootProject.ext.signingConfigs.keyAlias
            keyPassword rootProject.ext.signingConfigs.keyPassword
            storeFile file(rootProject.ext.signingConfigs.storeFile)
            storePassword rootProject.ext.signingConfigs.storePassword
        }
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion.toInteger()
    defaultConfig {
        applicationId "com.dragonforest.app.dragonforestworld"
        minSdkVersion rootProject.ext.android.minSdkVersion.toInteger()
        targetSdkVersion rootProject.ext.android.targetSdkVersion.toInteger()
        versionCode rootProject.ext.android.versionCode.toInteger()
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    // 输出APK 配置  具体逻辑 判断是否jenkins打包 或者 debug模式下的运行， 如果是 则修改名称为 app-release.apk
    // 否 则输出包含日期版本等信息的正式包 这样做可以在日常调试时 只生成1个apk
    android.applicationVariants.all { variant ->
        variant.outputs.all {//这里是all，下面是根据自己的情况来定制
            def date = new Date()
            def formattedDate = date.format('yyyyMMddHHmmss')
            def fileName
            if (variant.buildType.name == "debug") {
                fileName = "Dragonforest_debug_${formattedDate}.apk"
            } else if (variant.buildType.name == "release") {
                fileName = "${rootProject.ext.outApkInfo.appName}_${rootProject.ext.android.versionName}_${formattedDate}.apk"
            }
            outputFileName = fileName
        }
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies.appcompatV7
    implementation rootProject.ext.dependencies.design
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-vector-drawable:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':module_common')

    if (!rootProject.ext.moduleSetting.isLoginRunAlone.toBoolean()) {
        implementation project(':module_login')
    }
    if (!rootProject.ext.moduleSetting.isPushlishRunAlone.toBoolean()) {
        implementation project(':module_publish')
    }
    if (!rootProject.ext.moduleSetting.isShareRunAlone.toBoolean()) {
        implementation project(':module_share')
    }
    if (!rootProject.ext.moduleSetting.isPlanRunAlone.toBoolean()) {
        implementation project(':module_plan')
    }
    if (!rootProject.ext.moduleSetting.isMessageRunAlone.toBoolean()) {
        implementation project(':module_message')
    }
    if (!rootProject.ext.moduleSetting.isNotificationRunAlone.toBoolean()) {
        implementation project(':module_notification')
    }
//    implementation project(':lib_upgrade')
    implementation project(':libview')

    //====================三方依赖================================
    implementation 'de.hdodenhof:circleimageview:3.0.0'
    implementation 'com.github.xiaohaibin:XBanner:1.6.7'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'com.github.wildma:PictureSelector:1.1.4'
    implementation 'com.azhon:appupdate:2.4.0'
    implementation 'com.yanzhikai:TextPathView:0.2.1'
    implementation 'com.github.dragonforestgroup:ExpandGroupListView:1.3'
    //====================三方依赖-end============================
}
